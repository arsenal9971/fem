//Solución del problema de dispersión de un metafluido acúfastico

// Definimos constantes y la función de la onda incidente
real alpha=2, m=10, r=0.5, num=1, mbar=2, q=1, k1=1, k2=1;
// real kx=num, ky=m+k;
real w=3, c2=sqrt((w^2)/(k1^2+k2^2)), dt=0.01; 
//real a1=(r+m*(1-r))+(-(r*((m-1)^2)*(1-r))/(1-r+m*r)), b1=(r+m*(1-r)), k1=((alpha^2)*r+(1-r)*m),k2=k;
real a1=-1,b1=-1,d1=0,c1=0, q1=1/c2^2,q2=1/2^2;

//Definimos las funciones que vamos a iterar

int nharm= 15; // Numero de armonicos

//Creando el dominio y malla

border a(t=-15,45){x=t; y=0; label=1;};
border b(t=0,2*pi){x=45; y=t; label=2;};
border c(t=0,60){x=45-t; y=2*pi; label=3;};
border d(t=0,2*pi){x=-15; y=2*pi-t; label=4;};
border e(t=0,2*pi){x=5; y=t; label=5;};
border g(t=0,2*pi){x=10; y=t; label=6;};

int n=240;
mesh Th=buildmesh(a(n)+b(n)+c(n)+d(n)+e(n)+g(n));
fespace Ph(Th,P0); //Definimos el espacio de funciones continuas a pedazos
fespace Vh(Th,P2,periodic=[[1,x],[3,x]]); //Definimos el espacio de funciones peri\u00f3dicas en las fronteras 3 y 1
fespace Vhh(Th,P2);


Vh<complex> [int] uu(400);
uu[0]=0;
uu[1]=0;

Ph reg=region; //Llamamos a la función característica
//Definimos cada subdominio

int ncen=reg(6,1);
int nder=reg(12,1);
int nizq=reg(3,1);

//Definimos los coeficientes con funciones caracteristicas
Ph n1=-1+(a1+1)*(region==ncen);
Ph n2=-1+(b1+1)*(region==ncen); 
Ph n3=q2+(q1-q2)*(region==ncen);
Ph n4=(d1+c1)*(region==ncen);

//Empezamos el loop del tiempo
for(int j=0; j<400; j++)
{
func f=-1i*num*exp(1i*(k1*x+k2*y-w*j*dt));

varf vP(u,v)=int2d(Th)(n1*dx(u)*conj(dx(v)))+int2d(Th)(n4*(-1i*k2*dx(u)*conj(v)+dy(u)*conj(dx(v))))+int2d(Th)(n2*((k2^2)*u*conj(v)-2i*k2*dy(u)*conj(v)+dy(u)*conj(dy(v))))+int2d(Th)(n3*u*conj(v)/(c2*dt)^2)+int2d(Th)(n3*(-2*uu[j+1])*conj(v)/(c2*dt)^2)+int2d(Th)(n3*uu[j]*conj(v)/(c2*dt)^2)-int1d(Th,4)(f*exp(-1i*k2*y)*conj(v));

varf vF(u,v)=-int1d(Th,4)(f*exp(-1i*k2*y)*conj(v));
matrix<complex> A=vP(Vh,Vh); //la matriz de elemento de frontera

complex[int] bb=vF(0,Vh);
Vh<complex> u;

{// para limpiar odas las variables locales al final del bloque 
//calculo de la matriz de elemento de frontera
int kdfBEM=0; 
int[int] IdfB2Vh(0:Vh.ndof-1);//para numerar IdfB2Vh[i]==i
{
	int lbord=2; // etiquetamos la frontera del metodo BEM
	varf vbord(u1,v1)=on(lbord, u1=y-10); //valores negativos ..
	real[int] xb=vbord(0,Vh,tgv=1);
	sort(xb,IdfB2Vh); //ordenar el arreglo xb y IdfB2Vh
	xb=xb ? 1 : 0;// poner 1 si no es cero
	kdfBEM=xb.sum+0.5; // numero de profundidad de campo en la frontera
	IdfB2Vh.resize(kdfBEM); // IdfB2Vh[i] -> numero de profundidad de campo de la forntera
	}
	// fin de calculo de numeracion
	// entonces IdfB2Vh[ibem]=iVh donde ibem es una forma diferencial en el elemento de frontera, y iVh es una forma diferencial en el espacio Vh
	// .... c\u00e1lculo de la matr\u00edz completa de frontera ....
		complex[int,int] ABemFull(kdfBEM,kdfBEM); // la matr\u00edz completa del m\u00e9todo de la numeraci\u00f3n elemento de frontera
		ABemFull=0;// conjunto de 0
		real perio=2*pi;
		// Uso de la formula de cuadratura de orden mayor..
		for (int n=-nharm; n<=nharm; ++n)
		{
			varf vWn(u,w)=int1d(Th, 2,qforder=10)(exp(-2*pi*1i*(n)*y)*conj(w));
			complex[int] wwn(kdfBEM);
			complex[int] wn=vWn(0,Vh);
			wwn=wn(IdfB2Vh); // wwn(i)=wn(IdfB2Vh(i)) i=0 to wwn.n-1
				complex Gs=+2.*pi*abs(n/perio/perio);
			ABemFull += Gs*wwn*wwn';
		}

matrix<complex> ABem=ABemFull(IdfB2Vh^-1,IdfB2Vh^-1); //Build the sparse BEm matrix
//ABem(IdfB2Vh(ib), IdfB2Vh(jb))=ABemFull(ib,jb)
A=A+ABem;
}// para limpiar todas las variables locales al final del bloque. ABem ABemFUll
set(A,solver=UMFPACK);
u[]=A^-1*bb;
Vhh<complex> s=k1*u*(exp(1i*k2*y))*exp(1i*(k1+k2)*0.75);
Vhh sr=real(s), si=imag(s);
plot(sr, wait=1, cmm="sr" );
u=uu[j+1];
uu[j+1]=uu[j];
}




