//Problema de msma's en 3D en paralelo 

//Llamamos a las librerias necesarias
load "ff-Ipopt"
load "tetgen" 
load "medit" 
load "mmg3d-v4.0"                                                               
verbosity=0;
load "msh3"

//Definimos el archivo de salida

ofstream ff("histeresisnoparalelo.txt");

real he=0.0, s1=-0.11; 
real Ep=0, Ex=0, Et=0, E=0, Er=0; //inicializamos las energías 
real[int] dEt=[0.,0.,0.,0.,0.,0.,0.,0.]; //inicializamos el gradiente 
real[int] c=[0.,0.]; //inicializamos la constriccion 
real[int] t = [0.,0.,0.,0.,0.5,0.5,0.5,0.5]; //inicializar t con las últimas dos entradas multiplicadores de lagrange
real mu=0.5; //la mu de la barrera logaritmica (empezamos con barrera pequeña)
real theta=0.*pi/180.;

ff<< s1 << " " << he << " "<< t[0] << " " << t[1] << " " << t[2] << " " << t[3] <<  " " << t[4] << "" << t[5] << " " << Et << " " << Ep << " " << Ex << endl;
//iniciamos el loop del campo magnético externo de primera ida (con el campo magnético externo creciendo)

for(int j=0; j<300; j++)
{
//Tamaño de la muestra 

real l1=0.45, l2=0.26, l3=1.66;



//Definimos los dos mallados

//Definimos las etiquetas
int [int,int]  L1=[[311,312],[313,314],[315,316]];
int [int,int]  L2=[[1,2],[3,4],[5,6]];



//Creacion del dominio interior

int n=10;
border a(t=0,l1){x=t; y=0; label=1;};
border d(t=0,l2){x=l1; y=t; label=2;};
border e(t=0,l1){x=l1-t; y=l2; label=3;};
border f(t=0,l2){x=0; y=l2-t; label=4;};
mesh Th2=buildmesh(a(n)+d(n)+e(n)+f(n));
//La parte tridimensional 
int[int] rup=[0,L1(2,1)],  rdown=[0,L1(2,0)], rmid=[1,L1(1,0),2,L1(0,1),3,L1(1,1),4,L1(0,0)];
real zmin=0,zmax=l3;
mesh3 ThH=buildlayers(Th2,n,zbound=[zmin,zmax],labelmid=rmid,  reffaceup = rup,reffacelow = rdown);

//Creacion del dominio exterior 

int n2=20;
mesh Th3=square(n2,n2,[-100+200*x,-100+200*y]);
int[int] rup1=[0,L2(2,1)],  rdown1=[0,L2(2,0)], rmid1=[1,L2(1,0),2,L2(0,1),3,L2(1,1),4,L2(0,0)];
real zmin1=-100,zmax1=100;
mesh3 ThSd=buildlayers(Th3,n2,zbound=[zmin1,zmax1],labelmid=rmid1, reffaceup = rup1 ,reffacelow = rdown1);

mesh3 Th=ThH+ThSd;
medit("Th", Th);

fespace Vh(Th,P2);
fespace Vh1(ThH,P2);



//Defino los vectores normales interiores

macro nuC1 [1., 0., 0.] //
macro nuC2 [0., 1., 0.] //
macro nuC3 [0., 0., 1.] //
macro nuC4 [-1., 0., 0.] //
macro nuC5 [0., -1., 0.] //
macro nuC6 [0., 0., -1.] //

//defino el vector de magnetizacion
macro m [m1, m2, m3]//
macro e [t[0]+t[1],t[2]+t[3],t[4]+t[5]];

//Definimos las variables de cada espacio 

Vh u, v, um1, um2, um3;
Vh1 salida, ui, vi, wi;

//Inicializamos el funcional total (con las restricciones)


func real[int] gradJ(real[int] & t)
{

  real m1=t[0]-t[1]; 
  real m2=t[2]-t[3];
  real m3=t[4]-t[5];

//Calculamos solo en numero de region= numero de procesador  

solve Poisson(u,v) = 
   int3d(Th)(dx(u)*dx(v)+dy(u)*dy(v)+dz(u)*dz(v)) 
  +int2d(Th,311)((m'*nuC4)*v)
  +int2d(Th,312)((m'*nuC1)*v)
  +int2d(Th,313)((m'*nuC5)*v)
  +int2d(Th,314)((m'*nuC2)*v)
  +int2d(Th,315)((m'*nuC6)*v)
  +int2d(Th,316)((m'*nuC3)*v)
  +on(1,2,3,4,5,6,u=0);



ui=dx(u);
vi=dy(u);
wi=dz(u);

//Ahora las energias 

Ep=int3d(ThH)(-ui*m1-vi*m2-wi*m3)/2; //Energía magnética por el campo interior

Ex= l1*l2*l3*(0.5*(t[0]+t[1])*(t[2]+t[3])*(t[0]/(t[0]+t[1]+1e-12)-t[2]/(t[2]+t[3]+1e-12))^2.
  +0.5*(t[0]+t[1])*(t[4]+t[5])*(t[0]/(t[0]+t[1]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.
  +0.5*(t[2]+t[3])*(t[4]+t[5])*(t[2]/(t[2]+t[3]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.); //Energía de exceso 

//Calculamos la energía total

Et=Ep+Ex-he*(t[0]-t[1])*l1*l2*l3-(t[0]+t[1])*s1*l1*l2*l3-(t[2]+t[3])*s1*l1*l2*l3+2*(t[4]+t[5])*s1*l1*l2*l3; 

//Energia sin restricciones
Er= t[6]*(t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1)+t[7]*(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5])
-mu*(log(1-t[0]+1e-12)+log(1-t[1]+1e-12)+log(1-t[2]+1e-12)+log(1-t[3]+1e-12)+log(1-t[4]+1e-12)+log(1-t[5]+1e-12))-mu*(log(t[0]+1e-12)+log(t[1]+1e-12)+log(t[2]+1e-12)+log(t[3]+1e-12)+log(t[4]+1e-12)+log(t[5]+1e-12)); 

//parte de las restricciones
E=Et+Er; 

//Energía con restricciones
cout<<t<<endl;
cout<<E<< " "<< Ex<<endl; 

////////////////////////


real t01=t[0]+t[1]; 
real t23=t[2]+t[3];
real t45=t[4]+t[5];

dEt[0]=-int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[1]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[1]/(t01+1e-12)^2.))-he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[0]+1e-12))-mu/(t[0]+1e-12);

dEt[1]=int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[1]+1e-12))-mu/(t[1]+1e-12);

dEt[2]=-int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[2]+1e-12))-mu/(t[2]+1e-12);

dEt[3]=int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[3]+1e-12))-mu/(t[3]+1e-12);

dEt[4]=-int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t23+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[2]+t[3])-mu*(-1/(1-t[4]+1e-12))-mu/(t[4]+1e-12);

dEt[5]=int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+1./2.*l1*l2*l3*(t23*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[5]+1e-12))-mu/(t[5]+1e-12);

dEt[6]=t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1;

dEt[7]=(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5]);

return dEt;
}


//Método de gradiente decendiente

real precision=1E-6;
real eps=0.1;
int i=0;

while (sqrt(gradJ(t)[0]^2.+gradJ(t)[1]^2.+gradJ(t)[2]^2.+gradJ(t)[3]^2.+gradJ(t)[4]^2.+gradJ(t)[5]^2.+gradJ(t)[6]^2.+gradJ(t)[7]^2.)>precision && i<1000)
{
  t=t-eps*gradJ(t);
};

cout << t << " " << " " << Ep<< " "<< Ex << " "<< Et << " " << dEt << endl;



ff<< s1 << " " << he << " "<< t[0] << " " << t[1] << " " << t[2] << " " << t[3] <<  " " << t[4] << "" << t[5] << " " << Et << " " << Ep << " " << Ex << endl;

he=he+0.005;
};

//iniciamos el loop del campo magnético externo de primera ida (con el campo magnético externo creciendo)

for(int j=300; j<900; j++)
{
//Tamaño de la muestra 

real l1=0.45, l2=0.26, l3=1.66;



//Definimos los dos mallados

//Definimos las etiquetas
int [int,int]  L1=[[311,312],[313,314],[315,316]];
int [int,int]  L2=[[1,2],[3,4],[5,6]];



//Creacion del dominio interior

int n=10;
border a(t=0,l1){x=t; y=0; label=1;};
border d(t=0,l2){x=l1; y=t; label=2;};
border e(t=0,l1){x=l1-t; y=l2; label=3;};
border f(t=0,l2){x=0; y=l2-t; label=4;};
mesh Th2=buildmesh(a(n)+d(n)+e(n)+f(n));
//La parte tridimensional 
int[int] rup=[0,L1(2,1)],  rdown=[0,L1(2,0)], rmid=[1,L1(1,0),2,L1(0,1),3,L1(1,1),4,L1(0,0)];
real zmin=0,zmax=l3;
mesh3 ThH=buildlayers(Th2,n,zbound=[zmin,zmax],labelmid=rmid,  reffaceup = rup,reffacelow = rdown);

//Creacion del dominio exterior 

int n2=20;
mesh Th3=square(n2,n2,[-100+200*x,-100+200*y]);
int[int] rup1=[0,L2(2,1)],  rdown1=[0,L2(2,0)], rmid1=[1,L2(1,0),2,L2(0,1),3,L2(1,1),4,L2(0,0)];
real zmin1=-100,zmax1=100;
mesh3 ThSd=buildlayers(Th3,n2,zbound=[zmin1,zmax1],labelmid=rmid1, reffaceup = rup1 ,reffacelow = rdown1);

mesh3 Th=ThH+ThSd;
medit("Th", Th);

fespace Vh(Th,P2);
fespace Vh1(ThH,P2);



//Defino los vectores normales interiores

macro nuC1 [1., 0., 0.] //
macro nuC2 [0., 1., 0.] //
macro nuC3 [0., 0., 1.] //
macro nuC4 [-1., 0., 0.] //
macro nuC5 [0., -1., 0.] //
macro nuC6 [0., 0., -1.] //

//defino el vector de magnetizacion
macro m [m1, m2, m3]//
macro e [t[0]+t[1],t[2]+t[3],t[4]+t[5]];

//Definimos las variables de cada espacio 

Vh u, v, um1, um2, um3;
Vh1 salida, ui, vi, wi;

//Inicializamos el funcional total (con las restricciones)


func real[int] gradJ(real[int] & t)
{

  real m1=t[0]-t[1]; 
  real m2=t[2]-t[3];
  real m3=t[4]-t[5];

//Calculamos solo en numero de region= numero de procesador  

solve Poisson(u,v) = 
   int3d(Th)(dx(u)*dx(v)+dy(u)*dy(v)+dz(u)*dz(v)) 
  +int2d(Th,311)((m'*nuC4)*v)
  +int2d(Th,312)((m'*nuC1)*v)
  +int2d(Th,313)((m'*nuC5)*v)
  +int2d(Th,314)((m'*nuC2)*v)
  +int2d(Th,315)((m'*nuC6)*v)
  +int2d(Th,316)((m'*nuC3)*v)
  +on(1,2,3,4,5,6,u=0);



ui=dx(u);
vi=dy(u);
wi=dz(u);

//Ahora las energias 

Ep=int3d(ThH)(-ui*m1-vi*m2-wi*m3)/2; //Energía magnética por el campo interior

Ex= l1*l2*l3*(0.5*(t[0]+t[1])*(t[2]+t[3])*(t[0]/(t[0]+t[1]+1e-12)-t[2]/(t[2]+t[3]+1e-12))^2.
  +0.5*(t[0]+t[1])*(t[4]+t[5])*(t[0]/(t[0]+t[1]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.
  +0.5*(t[2]+t[3])*(t[4]+t[5])*(t[2]/(t[2]+t[3]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.); //Energía de exceso 

//Calculamos la energía total

Et=Ep+Ex-he*(t[0]-t[1])*l1*l2*l3-(t[0]+t[1])*s1*l1*l2*l3-(t[2]+t[3])*s1*l1*l2*l3+2*(t[4]+t[5])*s1*l1*l2*l3; 

//Energia sin restricciones
Er= t[6]*(t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1)+t[7]*(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5])
-mu*(log(1-t[0]+1e-12)+log(1-t[1]+1e-12)+log(1-t[2]+1e-12)+log(1-t[3]+1e-12)+log(1-t[4]+1e-12)+log(1-t[5]+1e-12))-mu*(log(t[0]+1e-12)+log(t[1]+1e-12)+log(t[2]+1e-12)+log(t[3]+1e-12)+log(t[4]+1e-12)+log(t[5]+1e-12)); 

//parte de las restricciones
E=Et+Er; 

//Energía con restricciones
cout<<t<<endl;
cout<<E<< " "<< Ex<<endl; 

////////////////////////


real t01=t[0]+t[1]; 
real t23=t[2]+t[3];
real t45=t[4]+t[5];

dEt[0]=-int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[1]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[1]/(t01+1e-12)^2.))-he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[0]+1e-12))-mu/(t[0]+1e-12);

dEt[1]=int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[1]+1e-12))-mu/(t[1]+1e-12);

dEt[2]=-int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[2]+1e-12))-mu/(t[2]+1e-12);

dEt[3]=int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[3]+1e-12))-mu/(t[3]+1e-12);

dEt[4]=-int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t23+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[2]+t[3])-mu*(-1/(1-t[4]+1e-12))-mu/(t[4]+1e-12);

dEt[5]=int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+1./2.*l1*l2*l3*(t23*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[5]+1e-12))-mu/(t[5]+1e-12);

dEt[6]=t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1;

dEt[7]=(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5]);

return dEt;
}


//Método de gradiente decendiente

real precision=1E-6;
real eps=0.01;
int i=0;

while (sqrt(gradJ(t)[0]^2.+gradJ(t)[1]^2.+gradJ(t)[2]^2.+gradJ(t)[3]^2.+gradJ(t)[4]^2.+gradJ(t)[5]^2.+gradJ(t)[6]^2.+gradJ(t)[7]^2.)>precision && i<1000)
{
  t=t-eps*gradJ(t);

};

cout << t << " " << " " << Ep<< " "<< Ex << " "<< Et << " " << dEt << endl;

ff<< s1 << " " << he << " "<< t[0] << " " << t[1] << " " << t[2] << " " << t[3] <<  " " << t[4] << "" << t[5] << " " << Et << " " << Ep << " " << Ex << endl;

he=he-0.005;
}

//iniciamos el loop del campo magnético externo de primera ida (con el campo magnético externo creciendo)

for(int j=900; j<1200; j++)
{
//Tamaño de la muestra 

real l1=0.45, l2=0.26, l3=1.66;



//Definimos los dos mallados

//Definimos las etiquetas
int [int,int]  L1=[[311,312],[313,314],[315,316]];
int [int,int]  L2=[[1,2],[3,4],[5,6]];



//Creacion del dominio interior

int n=10;
border a(t=0,l1){x=t; y=0; label=1;};
border d(t=0,l2){x=l1; y=t; label=2;};
border e(t=0,l1){x=l1-t; y=l2; label=3;};
border f(t=0,l2){x=0; y=l2-t; label=4;};
mesh Th2=buildmesh(a(n)+d(n)+e(n)+f(n));
//La parte tridimensional 
int[int] rup=[0,L1(2,1)],  rdown=[0,L1(2,0)], rmid=[1,L1(1,0),2,L1(0,1),3,L1(1,1),4,L1(0,0)];
real zmin=0,zmax=l3;
mesh3 ThH=buildlayers(Th2,n,zbound=[zmin,zmax],labelmid=rmid,  reffaceup = rup,reffacelow = rdown);

//Creacion del dominio exterior 

int n2=20;
mesh Th3=square(n2,n2,[-100+200*x,-100+200*y]);
int[int] rup1=[0,L2(2,1)],  rdown1=[0,L2(2,0)], rmid1=[1,L2(1,0),2,L2(0,1),3,L2(1,1),4,L2(0,0)];
real zmin1=-100,zmax1=100;
mesh3 ThSd=buildlayers(Th3,n2,zbound=[zmin1,zmax1],labelmid=rmid1, reffaceup = rup1 ,reffacelow = rdown1);

mesh3 Th=ThH+ThSd;
medit("Th", Th);

fespace Vh(Th,P2);
fespace Vh1(ThH,P2);



//Defino los vectores normales interiores

macro nuC1 [1., 0., 0.] //
macro nuC2 [0., 1., 0.] //
macro nuC3 [0., 0., 1.] //
macro nuC4 [-1., 0., 0.] //
macro nuC5 [0., -1., 0.] //
macro nuC6 [0., 0., -1.] //

//defino el vector de magnetizacion
macro m [m1, m2, m3]//
macro e [t[0]+t[1],t[2]+t[3],t[4]+t[5]];

//Definimos las variables de cada espacio 

Vh u, v, um1, um2, um3;
Vh1 salida, ui, vi, wi;

//Inicializamos el funcional total (con las restricciones)


func real[int] gradJ(real[int] & t)
{

  real m1=t[0]-t[1]; 
  real m2=t[2]-t[3];
  real m3=t[4]-t[5];

//Calculamos solo en numero de region= numero de procesador  

solve Poisson(u,v) = 
   int3d(Th)(dx(u)*dx(v)+dy(u)*dy(v)+dz(u)*dz(v)) 
  +int2d(Th,311)((m'*nuC4)*v)
  +int2d(Th,312)((m'*nuC1)*v)
  +int2d(Th,313)((m'*nuC5)*v)
  +int2d(Th,314)((m'*nuC2)*v)
  +int2d(Th,315)((m'*nuC6)*v)
  +int2d(Th,316)((m'*nuC3)*v)
  +on(1,2,3,4,5,6,u=0);



ui=dx(u);
vi=dy(u);
wi=dz(u);

//Ahora las energias 

Ep=int3d(ThH)(-ui*m1-vi*m2-wi*m3)/2; //Energía magnética por el campo interior

Ex= l1*l2*l3*(0.5*(t[0]+t[1])*(t[2]+t[3])*(t[0]/(t[0]+t[1]+1e-12)-t[2]/(t[2]+t[3]+1e-12))^2.
  +0.5*(t[0]+t[1])*(t[4]+t[5])*(t[0]/(t[0]+t[1]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.
  +0.5*(t[2]+t[3])*(t[4]+t[5])*(t[2]/(t[2]+t[3]+1e-12)-t[4]/(t[4]+t[5]+1e-12))^2.); //Energía de exceso 

//Calculamos la energía total

Et=Ep+Ex-he*(t[0]-t[1])*l1*l2*l3-(t[0]+t[1])*s1*l1*l2*l3-(t[2]+t[3])*s1*l1*l2*l3+2*(t[4]+t[5])*s1*l1*l2*l3; 

//Energia sin restricciones
Er= t[6]*(t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1)+t[7]*(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5])
-mu*(log(1-t[0]+1e-12)+log(1-t[1]+1e-12)+log(1-t[2]+1e-12)+log(1-t[3]+1e-12)+log(1-t[4]+1e-12)+log(1-t[5]+1e-12))-mu*(log(t[0]+1e-12)+log(t[1]+1e-12)+log(t[2]+1e-12)+log(t[3]+1e-12)+log(t[4]+1e-12)+log(t[5]+1e-12)); 

//parte de las restricciones
E=Et+Er; 

//Energía con restricciones
cout<<t<<endl;
cout<<E<< " "<< Ex<<endl; 

////////////////////////


real t01=t[0]+t[1]; 
real t23=t[2]+t[3];
real t45=t[4]+t[5];

dEt[0]=-int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[1]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[1]/(t01+1e-12)^2.))-he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[0]+1e-12))-mu/(t[0]+1e-12);

dEt[1]=int3d(ThH)(dx(u))+1./2.*l1*l2*l3*(t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+he*l1*l2*l3-s1*l1*l2*l3+t[6]+t[7]*(t[2]*t[3])*(t[4]+t[5])-mu*(-1/(1-t[1]+1e-12))-mu/(t[1]+1e-12);

dEt[2]=-int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(-t[3]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[2]+1e-12))-mu/(t[2]+1e-12);

dEt[3]=int3d(ThH)(dy(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))^2.+2.*t01*t23*(t[0]/(t01+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))^2.+2.*t45*t23*(t[4]/(t45+1e-12)-t[2]/(t23+1e-12))*(t[2]/(t23+1e-12)^2.))-s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[3]+1e-12))-mu/(t[3]+1e-12);

dEt[4]=-int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t01+1e-12)^2.))+1./2.*l1*l2*l3*(t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(-t[0]/(t23+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[2]+t[3])-mu*(-1/(1-t[4]+1e-12))-mu/(t[4]+1e-12);

dEt[5]=int3d(ThH)(dz(u))+1./2.*l1*l2*l3*(t01*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))^2.+2.*t01*t45*(t[0]/(t01+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+1./2.*l1*l2*l3*(t23*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))^2.+2.*t23*t45*(t[2]/(t23+1e-12)-t[4]/(t45+1e-12))*(t[4]/(t45+1e-12)^2.))+2*s1*l1*l2*l3+t[6]+t[7]*(t[0]*t[1])*(t[4]+t[5])-mu*(-1/(1-t[5]+1e-12))-mu/(t[5]+1e-12);

dEt[6]=t[0]+t[1]+t[2]+t[3]+t[4]+t[5]-1;

dEt[7]=(t[0]+t[1])*(t[2]+t[3])*(t[4]+t[5]);

return dEt;
}


//Método de gradiente decendiente

real precision=1E-6;
real eps=0.01;
int i=0;

while (sqrt(gradJ(t)[0]^2.+gradJ(t)[1]^2.+gradJ(t)[2]^2.+gradJ(t)[3]^2.+gradJ(t)[4]^2.+gradJ(t)[5]^2.+gradJ(t)[6]^2.+gradJ(t)[7]^2.)>precision && i<1000)
{
  t=t-eps*gradJ(t);
};

cout << t << " " << " " << Ep<< " "<< Ex << " "<< Et << " " << dEt << endl;


ff<< s1 << " " << he << " "<< t[0] << " " << t[1] << " " << t[2] << " " << t[3] <<  " " << t[4] << "" << t[5] << " " << Et << " " << Ep << " " << Ex << endl; 

he=he+0.005;
}
